# size_network, amount_communities, farther_nodes_
assortative,	assortative_gender,	assortative_category,
screen_eigenvector1,#, screen_autority1,
path) |>
gt() |>
tab_spanner(
label = "Network Measures",
columns = c(mean_distance, density, screen_eigenvector1)
) |>
tab_spanner(
label = "Degree Correlation",
columns = c(assortative, assortative_gender, assortative_category)
) |>
gt_add_divider(columns = "logo") |>
tab_header(
title = "Network Information by Party" ,
subtitle = html("<em>Elections 2019</em>") ) |>
#fmt_markdown(columns = c(farther_nodes_)) |>
text_transform(
locations = cells_body(columns = c(path)),
fn = function(path) {
lapply(path, local_image, height = 200)
}
) |>
text_transform(
locations = cells_body(columns = c(logo)),
fn = function(logo) {
lapply(logo, local_image, height = 20)
}
) |>
tab_footnote(
footnote = md("From 1 to -1. Between closest to 1 more correlation between nodes degree"),
locations = cells_column_labels(
columns = assortative
)
) |>
tab_footnote(
footnote =  md("The authority is based on Eigenvector centrality"),
locations = cells_column_labels(
columns = screen_eigenvector1
)
) |>
tab_source_note(
source_note = "Data: politicxsentwitteR from 01/08/2019 to 31/12/2019"
) |>
cols_label(
logo = "",
path = "Network image",
mean_distance = "Mean Distance",
assortative = "Assortative",
assortative_gender = "Assortative (gender)",
assortative_category = "Assortative (category)",
screen_eigenvector1 = "Authority",
density = "Density"
) |>
tab_options(
column_labels.background.color = "white",
table.border.top.width = px(3),
table.border.top.color = "transparent",
table.border.bottom.color = "transparent",
table.border.bottom.width = px(3),
column_labels.border.top.width = px(3),
column_labels.border.top.color = "transparent",
column_labels.border.bottom.width = px(3),
column_labels.border.bottom.color = "black",
data_row.padding = px(3),
source_notes.font.size = 12,
table.font.size = 16,
heading.align = "left")
net_try |>
#  mutate(assortative = as.numeric(assortative)) |>
filter(year == 2019)|>
select(logo, mean_distance,density, #diameter, ,
# size_network, amount_communities, farther_nodes_
assortative,	assortative_gender,	assortative_category,
screen_eigenvector1,#, screen_autority1,
path) |>
gt() |>
tab_spanner(
label = "Network Measures",
columns = c(mean_distance, density, screen_eigenvector1)
) |>
tab_spanner(
label = "Degree Correlation",
columns = c(assortative, assortative_gender, assortative_category)
) |>
gt_add_divider(columns = "logo") |>
tab_header(
title = "Network Information by Party" ,
subtitle = html("<em>Elections 2019</em>") ) |>
#fmt_markdown(columns = c(farther_nodes_)) |>
text_transform(
locations = cells_body(columns = c(path)),
fn = function(path) {
lapply(path, local_image, height = 200)
}
) |>
text_transform(
locations = cells_body(columns = c(logo)),
fn = function(logo) {
lapply(logo, local_image, height = 20)
}
) |>
tab_footnote(
footnote = md("From 1 to -1. Between closest to 1 more correlation between nodes degree"),
locations = cells_column_labels(
columns = assortative
)
) |>
tab_footnote(
footnote =  md("The authority is based on Eigenvector centrality"),
locations = cells_column_labels(
columns = screen_eigenvector1
)
) |>
tab_source_note(
source_note = "Data: politicxsentwitteR from 01/08/2019 to 31/12/2019"
) |>
cols_label(
logo = "",
path = "Network image",
mean_distance = "Mean Distance",
assortative = "Assortative",
assortative_gender = "Assortative (gender)",
assortative_category = "Assortative (category)",
screen_eigenvector1 = "Authority",
density = "Density"
) |>
tab_options(
column_labels.background.color = "white",
table.border.top.width = px(3),
table.border.top.color = "transparent",
table.border.bottom.color = "transparent",
table.border.bottom.width = px(3),
column_labels.border.top.width = px(3),
column_labels.border.top.color = "transparent",
column_labels.border.bottom.width = px(3),
column_labels.border.bottom.color = "black",
data_row.padding = px(3),
source_notes.font.size = 12,
table.font.size = 16,
heading.align = "left")
net_try |>
#  mutate(assortative = as.numeric(assortative)) |>
filter(year == 2019)|>
select(logo, mean_distance,density, #diameter, ,
# size_network, amount_communities, farther_nodes_
assortative,	assortative_gender,	assortative_category,
screen_eigenvector1,#, screen_autority1,
path) |>
gt() |>
tab_spanner(
label = "Network Measures",
columns = c(mean_distance, density, screen_eigenvector1)
) |>
tab_spanner(
label = "Degree Correlation",
columns = c(assortative, assortative_gender, assortative_category)
) |>
gt_add_divider(columns = "logo") |>
tab_header(
title = "Network Information by Party" ,
subtitle = html("<em>Elections 2019</em>") ) |>
#fmt_markdown(columns = c(farther_nodes_)) |>
text_transform(
locations = cells_body(columns = c(path)),
fn = function(path) {
lapply(path, local_image, height = 200)
}
) |>
text_transform(
locations = cells_body(columns = c(logo)),
fn = function(logo) {
lapply(logo, local_image, height = 20)
}
) |>
tab_footnote(
footnote = md("From 1 to -1. Between closest to 1 more correlation between nodes degree"),
locations = cells_column_labels(
columns = assortative
)
) |>
tab_footnote(
footnote =  md("The authority is based on Eigenvector centrality"),
locations = cells_column_labels(
columns = screen_eigenvector1
)
) |>
tab_source_note(
source_note = "Data: politicxsentwitteR from 01/08/2019 to 31/12/2019"
) |>
cols_label(
logo = "",
path = "Network image",
mean_distance = "Mean Distance",
assortative = "Assortative",
assortative_gender = "Assortative (gender)",
assortative_category = "Assortative (category)",
screen_eigenvector1 = "Authority",
density = "Density"
) |>
tab_options(
column_labels.background.color = "white",
table.border.top.width = px(3),
table.border.top.color = "transparent",
table.border.bottom.color = "transparent",
table.border.bottom.width = px(3),
column_labels.border.top.width = px(3),
column_labels.border.top.color = "transparent",
column_labels.border.bottom.width = px(3),
column_labels.border.bottom.color = "black",
data_row.padding = px(3),
source_notes.font.size = 12,
table.font.size = 16,
heading.align = "left") |>
data_color(
columns = assortative,
fn = scales::col_numeric(
palette = "viridis",
domain = c(-1,1) )
)
net_try |>
#  mutate(assortative = as.numeric(assortative)) |>
filter(year == 2019)|>
select(logo, mean_distance,density, #diameter, ,
# size_network, amount_communities, farther_nodes_
assortative,	assortative_gender,	assortative_category,
screen_eigenvector1,#, screen_autority1,
path) |>
gt() |>
tab_spanner(
label = "Network Measures",
columns = c(mean_distance, density, screen_eigenvector1)
) |>
tab_spanner(
label = "Degree Correlation",
columns = c(assortative, assortative_gender, assortative_category)
) |>
gt_add_divider(columns = "logo") |>
tab_header(
title = "Network Information by Party" ,
subtitle = html("<em>Elections 2019</em>") ) |>
|>
net_try |>
#  mutate(assortative = as.numeric(assortative)) |>
filter(year == 2019)|>
select(logo, mean_distance,density, #diameter, ,
# size_network, amount_communities, farther_nodes_
assortative,	assortative_gender,	assortative_category,
screen_eigenvector1,#, screen_autority1,
path) |>
gt() |>
tab_spanner(
label = "Network Measures",
columns = c(mean_distance, density, screen_eigenvector1)
) |>
tab_spanner(
label = "Degree Correlation",
columns = c(assortative, assortative_gender, assortative_category)
) |>
gt_add_divider(columns = "logo") |>
tab_header(
title = "Network Information by Party" ,
subtitle = html("<em>Elections 2019</em>") ) |>
data_color(
columns = assortative,
fn = scales::col_numeric(
palette = "viridis",
domain = c(-1,1) )
) |>
#fmt_markdown(columns = c(farther_nodes_)) |>
text_transform(
locations = cells_body(columns = c(path)),
fn = function(path) {
lapply(path, local_image, height = 200)
}
) |>
text_transform(
locations = cells_body(columns = c(logo)),
fn = function(logo) {
lapply(logo, local_image, height = 20)
}
) |>
tab_footnote(
footnote = md("From 1 to -1. Between closest to 1 more correlation between nodes degree"),
locations = cells_column_labels(
columns = assortative
)
) |>
tab_footnote(
footnote =  md("The authority is based on Eigenvector centrality"),
locations = cells_column_labels(
columns = screen_eigenvector1
)
) |>
tab_source_note(
source_note = "Data: politicxsentwitteR from 01/08/2019 to 31/12/2019"
) |>
cols_label(
logo = "",
path = "Network image",
mean_distance = "Mean Distance",
assortative = "Assortative",
assortative_gender = "Assortative (gender)",
assortative_category = "Assortative (category)",
screen_eigenvector1 = "Authority",
density = "Density"
) |>
tab_options(
column_labels.background.color = "white",
table.border.top.width = px(3),
table.border.top.color = "transparent",
table.border.bottom.color = "transparent",
table.border.bottom.width = px(3),
column_labels.border.top.width = px(3),
column_labels.border.top.color = "transparent",
column_labels.border.bottom.width = px(3),
column_labels.border.bottom.color = "black",
data_row.padding = px(3),
source_notes.font.size = 12,
table.font.size = 16,
heading.align = "left")
net_try |>
#  mutate(assortative = as.numeric(assortative)) |>
filter(year == 2019)|>
select(logo, mean_distance,density, #diameter, ,
# size_network, amount_communities, farther_nodes_
assortative,	assortative_gender,	assortative_category,
screen_eigenvector1,#, screen_autority1,
path) |>
gt() |>
tab_spanner(
label = "Network Measures",
columns = c(mean_distance, density, screen_eigenvector1)
) |>
tab_spanner(
label = "Degree Correlation",
columns = c(assortative, assortative_gender, assortative_category)
) |>
gt_add_divider(columns = "logo") |>
tab_header(
title = "Network Information by Party" ,
subtitle = html("<em>Elections 2019</em>") ) |>
#    data_color(
#    columns = assortative,
#  fn = scales::col_numeric(
#    palette = "viridis",
#    domain = c(-1,1) )
# ) |>
#fmt_markdown(columns = c(farther_nodes_)) |>
text_transform(
locations = cells_body(columns = c(path)),
fn = function(path) {
lapply(path, local_image, height = 200)
}
) |>
text_transform(
locations = cells_body(columns = c(logo)),
fn = function(logo) {
lapply(logo, local_image, height = 20)
}
) |>
tab_footnote(
footnote = md("From 1 to -1. Between closest to 1 more correlation between nodes degree"),
locations = cells_column_labels(
columns = assortative
)
) |>
tab_footnote(
footnote =  md("The authority is based on Eigenvector centrality"),
locations = cells_column_labels(
columns = screen_eigenvector1
)
) |>
tab_source_note(
source_note = "Data: politicxsentwitteR from 01/08/2019 to 31/12/2019"
) |>
cols_label(
logo = "",
path = "Network image",
mean_distance = "Mean Distance",
assortative = "Assortative",
assortative_gender = "Assortative (gender)",
assortative_category = "Assortative (category)",
screen_eigenvector1 = "Authority",
density = "Density"
) |>
tab_options(
column_labels.background.color = "white",
table.border.top.width = px(3),
table.border.top.color = "transparent",
table.border.bottom.color = "transparent",
table.border.bottom.width = px(3),
column_labels.border.top.width = px(3),
column_labels.border.top.color = "transparent",
column_labels.border.bottom.width = px(3),
column_labels.border.bottom.color = "black",
data_row.padding = px(3),
source_notes.font.size = 12,
table.font.size = 16,
heading.align = "left")
rm(list = ls())
install.packages("distill")
install.packages("tidyverse")
rm(list = ls())
install.packages("reticulate")
create_post(
"Introduction to Selenium with Twitter Data",
collection = "posts",
author = "auto",
slug = "auto",
date = Sys.Date()
)
library(distill)
create_post(
"Introduction to Selenium with Twitter Data",
collection = "posts",
author = "auto",
slug = "auto",
date = Sys.Date()
)
knitr::opts_chunk$set(echo = FALSE)
py_config()
library(reticulate)
library(reticulate)
py_config()
py_discover_config()
use_python("C:/Users/Usuario/Documents/.virtualenvs/r-reticulate/Scripts/python.exe")
library(reticulate)
use_python("C:/Users/Usuario/Documents/.virtualenvs/r-reticulate/Scripts/python.exe")
reticulate::repl_python()
import random
from bs4 import BeautifulSoup
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import re
import json
import random
from bs4 import BeautifulSoup
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import re
import json
import random
from bs4 import BeautifulSoup
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import re
import json
quit
knitr::opts_chunk$set(
echo = TRUE,
warning = TRUE,
message = TRUE,
R.options = list(width = 60)
)
data_followers<- read.csv("C:/Users/Usuario/Documents/GitHub/guada-blog/_posts/2024-03-03-introduction-to-selenium-with-twitter-data/data/data_followers_twitter_hsn.csv")
head(data_followers)
View(data_followers)
head(data_followers)
data_followers<- read.csv("C:/Users/Usuario/Documents/GitHub/guada-blog/_posts/2024-03-03-introduction-to-selenium-with-twitter-data/data/data_followers_twitter_hsn.csv", encoding = "latin-1")
head(data_followers)
library(readr)
data_followers_twitter_hsn <- read_csv("_posts/2024-03-03-introduction-to-selenium-with-twitter-data/data/data_followers_twitter_hsn.csv",
locale = locale(encoding = "ISO-8859-1"))
View(data_followers_twitter_hsn)
head(data_followers_twitter_hsn)
class(data_followers_twitter_hsn)
data_followers_twitter_hsn <-as.data.frame(data_followers_twitter_hsn)
head(data_followers_twitter_hsn)
data <- fromJSON("C:/Users/Usuario/Documents/GitHub/selenium-scraping-followers/Legisladores_Poroteo_HSN.json", flatten = TRUE)
install.packages("jsonlite")
install.packages("jsonlite")
librat("jsonlite")
library("jsonlite")
knitr::opts_chunk$set(
echo = TRUE,
warning = TRUE,
message = TRUE,
R.options = list(width = 60)
)
data <- fromJSON("C:/Users/Usuario/Documents/GitHub/selenium-scraping-followers/Legisladores_Poroteo_HSN.json", flatten = TRUE)
data <- fromJSON("C:/Users/Usuario/Documents/GitHub/selenium-scraping-followers/Legisladores_Poroteo_HSN.json")
head(data_followers_twitter_hsn)
head(data)
head(data_followers_twitter_hsn)
rm(list = ls())
data_followers_twitter_hsn <- read_csv("_posts/2024-03-03-introduction-to-selenium-with-twitter-data/data/data_followers_twitter_hsn.csv", locale = locale(encoding = "ISO-8859-1"))
data_followers_twitter_hsn <-as.data.frame(data_followers_twitter_hsn)
head(data_followers_twitter_hsn)
data_followers_twitter_hsn <- read_csv("_posts/2024-03-03-introduction-to-selenium-with-twitter-data/data/data_followers_twitter_hsn.csv", locale = locale(encoding = "ISO-8859-1"))
library(readr)
data_followers_twitter_hsn <- read_csv("_posts/2024-03-03-introduction-to-selenium-with-twitter-data/data/data_followers_twitter_hsn.csv", locale = locale(encoding = "ISO-8859-1"))
data_followers_twitter_hsn <-as.data.frame(data_followers_twitter_hsn)
data_followers_twitter_hsn <- read_csv("_posts/2024-03-03-introduction-to-selenium-with-twitter-data/data/data_followers_twitter_hsn.csv", locale = locale(encoding = "ISO-8859-1"))
library(readr)
data_followers_twitter_hsn <- read_csv("_posts/2024-03-03-introduction-to-selenium-with-twitter-data/data/data_followers_twitter_hsn.csv")
